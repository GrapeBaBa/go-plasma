// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package eventlog

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*publishedBlockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (p PublishedBlockEvent) MarshalJSON() ([]byte, error) {
	type PublishedBlockEvent struct {
		RootHash            common.Hash    `json:"rootHash"             gencodec:"required"`
		Blocknumber         hexutil.Uint64 `json:"blknum"               gencodec:"required"`
		CurrentDepositIndex hexutil.Uint64 `json:"currentDepositIndex"  gencodec:"required"`
	}
	var enc PublishedBlockEvent
	enc.RootHash = p.RootHash
	enc.Blocknumber = hexutil.Uint64(p.Blocknumber)
	enc.CurrentDepositIndex = hexutil.Uint64(p.CurrentDepositIndex)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (p *PublishedBlockEvent) UnmarshalJSON(input []byte) error {
	type PublishedBlockEvent struct {
		RootHash            *common.Hash    `json:"rootHash"             gencodec:"required"`
		Blocknumber         *hexutil.Uint64 `json:"blknum"               gencodec:"required"`
		CurrentDepositIndex *hexutil.Uint64 `json:"currentDepositIndex"  gencodec:"required"`
	}
	var dec PublishedBlockEvent
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.RootHash == nil {
		return errors.New("missing required field 'rootHash' for PublishedBlockEvent")
	}
	p.RootHash = *dec.RootHash
	if dec.Blocknumber == nil {
		return errors.New("missing required field 'blknum' for PublishedBlockEvent")
	}
	p.Blocknumber = uint64(*dec.Blocknumber)
	if dec.CurrentDepositIndex == nil {
		return errors.New("missing required field 'currentDepositIndex' for PublishedBlockEvent")
	}
	p.CurrentDepositIndex = uint64(*dec.CurrentDepositIndex)
	return nil
}
